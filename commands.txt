from news.models import *

1) Создать двух пользователей (с помощью метода User.objects.create_user):
user1 = User.objects.create(username='Anton', first_name='Ted')
user2 = User.objects.create(username='Tim', first_name='Cook')


2) Создать два объекта модели Author, связанные с пользователями:
Author.objects.create(author_user=user1)
Author.objects.create(author_user=user2)


3) Добавить 4 категории в модель Category:
Category.objects.create(name='Politic')
Category.objects.create(name='Sport')
Category.objects.create(name='Education')
Category.objects.create(name='Car')


4) Добавить 2 статьи и 1 новость:
Post.objects.create(author_us=Author.objects.get(author_user=User.objects.get(username='Anton')), category_type='AR', title='title 1', text = 'text 1')

Post.objects.create(author_us=Author.objects.get(author_user=User.objects.get(username='Tim')), category_type='AR', title='title 2', text = 'text 2')

Post.objects.create(author_us=Author.objects.get(author_user=User.objects.get(username='Tim')), category_type='NW', title='title 3', text = 'text 3')


5) Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий):
p1 = Post.objects.get(pk=1)
p2 = Post.objects.get(pk=2)
p3 = Post.objects.get(pk=3)
c1 = Category.objects.get(name='Politic')
c2 = Category.objects.get(name='Education')
c3 = Category.objects.get(name='Sport')
c4 = Category.objects.get(name='Car')
p1.post_category.add(c1)
p2.post_category.add(c2, c3)
p3.post_category.add(c4)


6) Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий):
Comment.objects.create(comment_user=User.objects.get(username='Anton'), comment_post=Post.objects.get(pk=1), text='text comment 1')
Comment.objects.create(comment_user=User.objects.get(username='Anton'), comment_post=Post.objects.get(pk=2), text='text comment 2')
Comment.objects.create(comment_user=User.objects.get(username='Tim'), comment_post=Post.objects.get(pk=3), text='text comment 3')
Comment.objects.create(comment_user=User.objects.get(username='Tim'), comment_post=Post.objects.get(pk=1), text='text comment 4')


7) Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов:
Post.objects.get(pk=1).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=3).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=3).dislike()
Post.objects.get(pk=1).like()
Post.objects.get(pk=1).dislike()
Post.objects.get(pk=2).like()

Comment.objects.get(pk=1).like()
Comment.objects.get(pk=1).like()
Comment.objects.get(pk=2).dislike()
Comment.objects.get(pk=2).dislike()
Comment.objects.get(pk=3).like()
Comment.objects.get(pk=3).dislike()


8) Обновить рейтинги пользователей:
Author.objects.get(author_user=User.objects.get(username='Anton')).update_rating()
Author.objects.get(author_user=User.objects.get(username='Tim')).update_rating()


9) Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта):
best = Author.objects.all().order_by('-rating_author').values('author_user', 'rating_author')[0]

10) Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье:
post = Post.objects.all().order_by('-rating')[0]
post.preview()
best_post = Post.objects.all().order_by('-rating').values('date_creation', 'author_us', 'rating', 'title')[0]


11) Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье:
Comment.objects.filter(comment_post = post).values('date_creation', 'comment_user', 'rating', 'text')